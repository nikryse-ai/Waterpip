import os
import asyncio
import random
import threading
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional

from flask import Flask  # –º–∞–ª–µ–Ω—å–∫–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render Web Service

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    AIORateLimiter,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ----------------- –õ–Å–ì–ö–ò–ô –í–ï–ë-–°–ï–†–í–ï–† (–¥–ª—è Render Web Service) -----------------
app_web = Flask(__name__)

@app_web.route("/")
def home():
    return "üíß Water Reminder Bot is running."

def run_web():
    app_web.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

# ----------------- –•–†–ê–ù–ò–õ–ò–©–ï (Redis –∏–ª–∏ in-memory) -----------------
USE_REDIS = bool(os.getenv("REDIS_URL"))
if USE_REDIS:
    import redis
    r = redis.Redis.from_url(os.environ["REDIS_URL"], decode_responses=True)
else:
    r = None
    _store: Dict[str, str] = {}

def kv_get(key: str) -> Optional[str]:
    if r:
        return r.get(key)
    return _store.get(key)

def kv_set(key: str, value: str):
    if r:
        r.set(key, value)
    else:
        _store[key] = value

def kv_del(key: str):
    if r:
        r.delete(key)
    else:
        _store.pop(key, None)

# ----------------- –ö–û–ù–°–¢–ê–ù–¢–´ / –í–†–ï–ú–Ø (–≤—Å–µ–≥–¥–∞ –ú–°–ö, UTC+3) -----------------
def now_msk() -> datetime:
    """–¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫."""
    return datetime.utcnow() + timedelta(hours=3)

DAY_START = time(7, 30)     # 07:30
DAY_END = time(23, 59)      # –¥–æ 00:00
DEFAULT_INTERVAL_MIN = 90   # –∫–∞–∂–¥—ã–µ 90 –º–∏–Ω—É—Ç
RETRY_MINUTES = 10          # –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∞ –∫–Ω–æ–ø–∫—É

# –ö–ª—é—á–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
def k_enabled(chat_id): return f"user:{chat_id}:enabled"
def k_interval(chat_id): return f"user:{chat_id}:interval"
def k_times(chat_id): return f"user:{chat_id}:times"   # CSV "HH:MM,HH:MM"
def k_ack(chat_id, stamp): return f"ack:{chat_id}:{stamp}"  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

# ----------------- –£–¢–ò–õ–ò–¢–´ –í–†–ï–ú–ï–ù–ò -----------------
def parse_times_csv(csv_text: str) -> List[time]:
    items = [x.strip() for x in csv_text.split(",") if x.strip()]
    out = []
    for item in items:
        hh, mm = item.split(":")
        out.append(time(int(hh), int(mm)))
    return out

def build_default_times(interval_min: int) -> List[time]:
    times = []
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –¥–∞—Ç—É, –≤–∞–∂–Ω—ã —Ç–æ–ª—å–∫–æ —á–∞—Å—ã/–º–∏–Ω—É—Ç—ã
    cur = datetime.combine(datetime(2000, 1, 1).date(), DAY_START)
    end_dt = datetime.combine(datetime(2000, 1, 1).date(), DAY_END)
    while cur <= end_dt:
        times.append(cur.time())
        cur += timedelta(minutes=interval_min)
    return times

def user_times(chat_id: int) -> List[time]:
    csv = kv_get(k_times(chat_id))
    if csv:
        return parse_times_csv(csv)
    interval = kv_get(k_interval(chat_id))
    interval = int(interval) if interval else DEFAULT_INTERVAL_MIN
    return build_default_times(interval)

def is_enabled(chat_id: int) -> bool:
    return (kv_get(k_enabled(chat_id)) == "1")

# ----------------- –õ–û–ì–ò–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô -----------------
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ + –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ—Ç ack."""
    chat_id = context.job.chat_id
    stamp = context.job.kwargs["stamp"]
    main_messages = [
        "–°–æ–ª–Ω—ã—à–∫–æ ‚òÄÔ∏è, –ø–æ–ø–µ–π –≤–æ–¥–∏—á–∫–∏",
        "–ù–∞—Å—Ç—é—à–∞ üíñ, –ø–æ—Ä–∞ –ø–æ–ø–∏—Ç—å –≤–æ–¥–∏—á–∫–∏. –õ—é–±–ª—é)",
        "–ë—É—Å–∏–Ω–∫–∞, –ø–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É.",
        "–õ—é–±–∏–º–∞—è, –Ω–∞–ø–æ–º–∏–Ω–∞—é –≤—ã–ø–µ–π –≤–æ–¥—ã üí¶",
    ]
    text = random.choice(main_messages)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–Ø –ø–æ–ø–∏–ª–∞ üíß", callback_data=f"ack:{stamp}")
    ]])
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

    # –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∞
    context.application.job_queue.run_once(
        callback=retry_if_not_ack,
        when=RETRY_MINUTES * 60,
        chat_id=chat_id,
        name=f"retry:{chat_id}:{stamp}",
        kwargs={"stamp": stamp},
    )

async def retry_if_not_ack(context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –º—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞."""
    chat_id = context.job.chat_id
    stamp = context.job.kwargs["stamp"]
    if kv_get(k_ack(chat_id, stamp)) == "1":
        return  # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Äî –ø–æ–≤—Ç–æ—Ä –Ω–µ –Ω—É–∂–µ–Ω

    retry_messages = [
        "–ù–∞—Å—Ç—é—à–∞, —Ç—ã –∑–∞–±—ã–ª–∞ –ø—Ä–æ –≤–æ–¥—É? üíß",
        "–ú–∏–ª–∞—è ‚òÄÔ∏è, —Å–Ω–æ–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞—é ‚Äî –ø–æ–ø–µ–π –≤–æ–¥–∏—á–∫–∏)",
        "–°–æ–ª–Ω—ã—à–∫–æ, –Ω–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å)",
    ]
    text = random.choice(retry_messages)
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–Ø –ø–æ–ø–∏–ª–∞ üíß", callback_data=f"ack:{stamp}")
    ]])
    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=kb)

async def schedule_today(application: Application, chat_id: int):
    """–†–∞—Å–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã –∏ —Å—Ç–∞–≤–∏—Ç –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –ø–æ–ª–Ω–æ—á—å (–ú–°–ö)."""
    if not is_enabled(chat_id):
        return

    times = user_times(chat_id)

    # –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ daily-–∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    for job in application.job_queue.get_jobs_by_name(f"daily:{chat_id}"):
        job.remove()

    now_local = now_msk()
    today = now_local.date()

    # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ—Ç—ã
    for t in times:
        dt_local = datetime.combine(today, t)  # ¬´–º–æ—Å–∫–æ–≤—Å–∫–∞—è¬ª –¥–∞—Ç–∞-–≤—Ä–µ–º—è
        if dt_local >= now_local:
            stamp = dt_local.isoformat()  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–ª–æ—Ç–∞
            kv_del(k_ack(chat_id, stamp))
            delay_sec = (dt_local - now_local).total_seconds()
            application.job_queue.run_once(
                callback=send_reminder,
                when=max(0, delay_sec),
                chat_id=chat_id,
                name=f"remind:{chat_id}:{stamp}",
                kwargs={"stamp": stamp},
            )

    # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ ¬´–º–æ—Å–∫–æ–≤—Å–∫—É—é –ø–æ–ª–Ω–æ—á—å¬ª (+1 —Å–µ–∫)
    midnight_next = datetime.combine(today, time(23, 59, 59)) + timedelta(seconds=1)
    delay_midnight = (midnight_next - now_local).total_seconds()
    application.job_queue.run_once(
        callback=midnight_reschedule,
        when=max(1, int(delay_midnight)),
        chat_id=chat_id,
        name=f"daily:{chat_id}",
    )

async def midnight_reschedule(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await schedule_today(context.application, chat_id)

# ----------------- –ö–û–ú–ê–ù–î–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    kv_set(k_enabled(chat_id), "1")
    if not kv_get(k_interval(chat_id)) and not kv_get(k_times(chat_id)):
        kv_set(k_interval(chat_id), str(DEFAULT_INTERVAL_MIN))

    await schedule_today(context.application, chat_id)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–æ–¥–∏—á–∫–µ üíß –∫–∞–∂–¥—ã–µ 90 –º–∏–Ω—É—Ç —Å 07:30 –¥–æ 00:00 (–ø–æ –ú–æ—Å–∫–≤–µ).\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stop ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å\n"
        "/interval <–º–∏–Ω—É—Ç—ã> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90)\n"
        "/times HH:MM,HH:MM,‚Ä¶ ‚Äî –∑–∞–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–ø–æ –ú–æ—Å–∫–≤–µ)"
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    kv_set(k_enabled(chat_id), "0")
    # –£–¥–∞–ª–∏–º –≤—Å–µ job —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    for job in context.application.job_queue.jobs():
        if job.name and (f":{chat_id}" in job.name):
            job.remove()
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –Ø —Ä—è–¥–æ–º, –µ—Å–ª–∏ —á—Ç–æ ‚ù§Ô∏è")

async def set_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö: /interval 90")
        return
    try:
        minutes = int(context.args[0])
        if minutes < 10 or minutes > 360:
            raise ValueError
    except ValueError:
        await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 360.")
        return
    kv_set(k_interval(chat_id), str(minutes))
    kv_del(k_times(chat_id))  # –µ—Å–ª–∏ –±—ã–ª —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω ‚Äî —É–±–∏—Ä–∞–µ–º
    kv_set(k_enabled(chat_id), "1")
    await schedule_today(context.application, chat_id)
    await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {minutes} –º–∏–Ω. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã (–ø–æ –ú–æ—Å–∫–≤–µ).")

async def set_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /times 07:30,09:00,12:15,20:00")
        return
    csv = " ".join(context.args).replace(" ", "")
    try:
        parse_times_csv(csv)
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 07:30,09:00,12:15,20:00")
        return
    kv_set(k_times(chat_id), csv)
    kv_del(k_interval(chat_id))
    kv_set(k_enabled(chat_id), "1")
    await schedule_today(context.application, chat_id)
    await update.message.reply_text(f"–ó–∞–¥–∞–Ω—ã —Ç–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {csv} (–ø–æ –ú–æ—Å–∫–≤–µ). –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã.")

# ----------------- –ö–ù–û–ü–ö–ò -----------------
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    if data.startswith("ack:"):
        stamp = data.split(":", 1)[1]
        chat_id = query.message.chat_id
        kv_set(k_ack(chat_id, stamp), "1")
        responses = [
            "–í–æ—Ç —É–º–Ω–∏—á–∫–∞! üíñ –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π üå∑",
            "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, —Å–æ–ª–Ω—ã—à–∫–æ ‚òÄÔ∏èüí¶",
            "–ë—É—Å–∏–Ω–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ)",
            "–û–µ—Å, —É–º–Ω–∏—á–∫–∞ üíßüíã",
        ]
        text = random.choice(responses)
        try:
            await query.edit_message_text(text)
        except Exception:
            await context.bot.send_message(chat_id, text)
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=False)

# ----------------- MAIN -----------------
async def main():
    bot_token = os.environ["BOT_TOKEN"]
    app: Application = (
        ApplicationBuilder()
        .token(bot_token)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("interval", set_interval))
    app.add_handler(CommandHandler("times", set_times))
    app.add_handler(CallbackQueryHandler(on_button))

    await app.initialize()
    await app.start()
    await app.updater.start_polling(drop_pending_updates=True)
    try:
        await asyncio.Event().wait()
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª—ë–≥–∫–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ,
    # —á—Ç–æ–±—ã Render Web Service –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç.
    threading.Thread(target=run_web, daemon=True).start()
    asyncio.run(main())
